class TV_MonsterModifier : EventHandler {
	// DEPRECATED - do not add any code here!
}

class TV_StaticMonsterModifier : StaticEventHandler {

	/**
	Add a TV_Actor_VFX_Updater inventory item to a Thing, and check some preconditions.
	*/
	void addVFXUpdater(Actor thing, bool trackMovement, bool trackThermal, float heat, float heatLoss) {
		if (thing.GetRenderStyle() == STYLE_NONE) {
			console.printf("WARN (TokyoVisor): %s has STYLE_NONE RenderStyle, which is not supported by TV_Actor_VFX_Updater; not adding TV_Actor_VFX_Updater!", thing.GetClassName());
			return;
		}
		let cv = CVar.FindCVar("tokyo_visor_debuginfo");
		if (cv) { 
			if (cv.GetBool()) {
				console.printf("DEBUG (TokyoVisor): Adding VFX updater to %s", thing.GetClassName());
			}
		}
		thing.SetInventory('TV_Actor_VFX_Updater', 1);
		let updater = TV_Actor_VFX_Updater(thing.FindInventory('TV_Actor_VFX_Updater'));
		if (updater) {
			updater.trackMovement = trackMovement;
			updater.trackThermal = trackThermal;
			updater.heat = heat;
			updater.heatLoss = heatLoss;
		} else {
			console.printf("WARN (TokyoVisor): cannot find VFX updater inventory anymore on %s !?!?!?", thing.GetClassName());
		}
	}

	bool TrackActorMaybe(Actor actor) {
		if(!actor) { return false; }

		// Don't track these, ever!
		if (
			actor.CheckClass('RedPlasmaPuff', AAPTR_DEFAULT, true) 
			|| actor.CheckClass('RedPlasmaParticleSpawner', AAPTR_DEFAULT, true)
			|| actor.CheckClass('SporeMissile', AAPTR_DEFAULT, true)
			|| actor.CheckClass('SuppressionPoint', AAPTR_DEFAULT, true)) {
			return false;
		}

		// movement with persistent heat signatures:
		if(!actor.CheckClass('GrenadeDestination', AAPTR_DEFAULT, true)
		 && !actor.CheckClass('SentryGunTurret', AAPTR_DEFAULT, true)
		 && !actor.CheckClass('SentryGunAlien', AAPTR_DEFAULT, true)
		 && !actor.CheckClass('SentryGunAlienTurret', AAPTR_DEFAULT, true)
		 && !actor.CheckClass('SentryGunTurretRocket', AAPTR_DEFAULT, true)
		 && !actor.CheckClass('CrawlerMine', AAPTR_DEFAULT, true)
		 && !actor.CheckClass('Sawdrone', AAPTR_DEFAULT, true)
		 && (actor.CheckClass('SelacoEnemy', AAPTR_DEFAULT, true)
			|| actor.CheckClass('BurningCivilian', AAPTR_DEFAULT, true)
			|| actor.CheckClass('CarFire', AAPTR_DEFAULT, true)
			|| actor.CheckClass('MegaFire', AAPTR_DEFAULT, true)
		)) {
			addVFXUpdater(actor, true, true, 1.0, 0.0);
			return true;
		}

		// no movement tracking, persistent heat signatures:
		if(!actor.CheckClass('SparkX', AAPTR_DEFAULT, true) &&
			(actor.CheckClass('CarFire', AAPTR_DEFAULT, true)
			|| actor.CheckClass('MegaFire', AAPTR_DEFAULT, true)
			|| actor.CheckClass('FireActor', AAPTR_DEFAULT, true)
			|| actor.CheckClass('ExplosionParticleHeavy', AAPTR_DEFAULT, true)
			|| actor.CheckClass('ExplosionEffect', AAPTR_DEFAULT, true))) {
			addVFXUpdater(actor, false, true, 1.0, 0.0);
			return true;
		}

		// movement tracking with heat signatures that lose temperature over time:
		if(!actor.CheckClass('SuperGorePurple', AAPTR_DEFAULT, true) && 
				(actor.CheckClass('GoreMaster', AAPTR_DEFAULT, true)
				|| actor.CheckClass('FlameParticle', AAPTR_DEFAULT, true))) {
			addVFXUpdater(actor, true, true, 1.0, 0.001);
			return true;
		}

		// movement tracking with NO heat signatures
		// TODO: check why STYLE_TranslucentStencil doesn't work for PlasmaProjectile / PlasmaProjectileEnemy
		if(!actor.CheckClass('PlasmaProjectile', AAPTR_DEFAULT, true) && (
			actor.CheckClass('AlienTracer', AAPTR_DEFAULT, true)
			|| actor.CheckClass('SentryGunTurret', AAPTR_DEFAULT, true)
			|| actor.CheckClass('SentryGunAlien', AAPTR_DEFAULT, true)
			|| actor.CheckClass('SentryGunAlienTurret', AAPTR_DEFAULT, true)
			|| actor.CheckClass('SentryGunTurretRocket', AAPTR_DEFAULT, true)
			|| actor.CheckClass('CrawlerMine', AAPTR_DEFAULT, true)
			|| actor.CheckClass('Sawdrone', AAPTR_DEFAULT, true)
			|| actor.CheckClass('SelacoTracer', AAPTR_DEFAULT, true)
			|| actor.CheckClass('SentryGunTurretRocket', AAPTR_DEFAULT, true)
			|| actor.CheckClass('EnemyTracerShotgun', AAPTR_DEFAULT, true)
			|| actor.CheckClass('EnemyTracer', AAPTR_DEFAULT, true)
			)) {
			addVFXUpdater(actor, true, false, 0.0, 0.0);
			return true;
		}

		if (actor.CheckClass('Dawn', AAPTR_DEFAULT, true)) {
			actor.SetInventory('TV_VisorItem', 1); // give Visor Item to be able to control Toyko Visor
			return true;
		}

		// effects that are hidden on Thermal/Motion, to improve accuracy of the shader effect
		if (actor.CheckClass('SelacoSmoke', AAPTR_DEFAULT, true) 
		    || actor.CheckClass('ExplosionSmoke', AAPTR_DEFAULT, true)
			|| actor.CheckClass('WallShrapnel', AAPTR_DEFAULT, true)
			|| actor.CheckClass('SteamParticle', AAPTR_DEFAULT, true)
			|| actor.CheckClass('ImpactEffect', AAPTR_DEFAULT, true)
			|| actor.CheckClass('BulletImpactSmoke', AAPTR_DEFAULT, true)
			|| actor.CheckClass('Ricochet', AAPTR_DEFAULT, true)
			|| actor.CheckClass('VentilationSmoke', AAPTR_DEFAULT, true)
			|| actor.CheckClass('AlienMuzzle', AAPTR_DEFAULT, true)
			|| actor.CheckClass('Flare_General', AAPTR_DEFAULT, true)
			|| actor.CheckClass('flareRedMuzzleFlash', AAPTR_DEFAULT, true)
			|| actor.CheckClass('SparkEffect', AAPTR_DEFAULT, true)
			|| actor.CheckClass('SelacoLightEffect', AAPTR_DEFAULT, true)
			|| actor.CheckClass('LightShaftMaster', AAPTR_DEFAULT, true)
			|| actor.CheckClass('SelacoParticle', AAPTR_DEFAULT, true)) {
			actor.SetInventory('TV_ConditionalEffectHider', 1);
			// don't need to call checkThing() here, as TV_ConditionalEffectHider supports falling back to the original renderstyle
			return true;
		} 

		// DEBUG: print the class of whatever's left!
		/*
		if (actor.CheckClass('RestorePowerup', AAPTR_DEFAULT, true) 
		    || actor.CheckClass('PowerSpeed', AAPTR_DEFAULT, true)
			|| actor.CheckClass('AimingCamera', AAPTR_DEFAULT, true)) {
			// IGNORE
			return false;
		}
		if (!(actor.CheckClass('TV_ConditionalEffectHider', AAPTR_DEFAULT, true) || actor.CheckClass('TV_Actor_VFX_Updater', AAPTR_DEFAULT, true))) {
			console.printf("%s", actor.GetClassName());
		}
		*/

		return false;
	}

	override void WorldThingSpawned(WorldEvent e) {
		if(!e.Thing) { return; }
		let cv = CVar.FindCVar("tokyo_visor_enabled");
		if (cv) { 
			if (!cv.GetBool()) {
				return;
			}
		}
		TrackActorMaybe(e.Thing);
	}

    override void NetworkProcess(ConsoleEvent e) {
		// Install Tokyo Visor (NOTE: Also handled in TV_NetEventHandler!)
        if(e.name == "TV_AddVisorItem") {
			let i = 0;
            console.printf("Tokyo Visor: Ensuring trackers are given to Actors...");
			Actor actor;
			ThinkerIterator actorList = ThinkerIterator.Create("Actor");
			while (actor = Actor(actorList.Next()))
			{
				let tracked = TrackActorMaybe(actor);
				if (tracked) {
					i += 1;
				}
			}
			console.printf("Tokyo Visor: tracking %i Actors!", i);
            return;
        }
	}

    override void WorldLoaded (WorldEvent e)
    {
        // remove any lingering TV_MonsterModifier left over from previous versions of this mod
        let dest = EventHandler.find("TV_MonsterModifier");
        if (dest) {
            console.printf("Removing lingering TV_MonsterModifier");
            dest.destroy();
        }
    }

	override void OnRegister()
	{
		SetOrder(10);
	}
}
