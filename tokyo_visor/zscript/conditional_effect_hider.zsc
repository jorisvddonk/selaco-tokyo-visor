class TV_ConditionalEffectHider : Inventory
{
	int prevstyle;
    float prevalpha;
    float prevscalex;
    float prevscaley;
	bool wasenabled;

	default {
		Inventory.MaxAmount 1;
		+INVENTORY.PERSISTENTPOWER;
	}

	override void Tick() {
		PlayerInfo p = players[consoleplayer];
		PlayerPawn pawn = p.mo;
		let d = Dawn(pawn);
		if((d) && d.countInv("TV_VisorItem") > 0) {
			TV_VisorItem visor = TV_VisorItem(d.FindInventory("TV_VisorItem"));
		
			bool nightvision_enabled = visor.visorActive && visor.visorMode == TV_NIGHTVISION;
			bool motionvision_enabled = visor.visorActive && visor.visorMode == TV_MOTIONVISION;
			bool thermalvision_enabled = visor.visorActive && visor.visorMode == TV_THERMALVISION;

			if (!visor.visorActive && wasenabled) {
				owner.bBright = false; // TODO: properly reset / determine elsewhere?
				owner.A_SetRenderStyle(1.0, prevstyle);
				owner.A_SETSCALE(prevscalex, prevscaley);
				owner.alpha = prevalpha;
				wasenabled = false;
				Super.Tick();
				return;
			}

			if (motionvision_enabled) {
				if (!wasenabled) {
					storeStyles();
					wasenabled = true;
				}
				if (owner.CheckClass('WallShrapnel', AAPTR_DEFAULT, true)
				    || owner.CheckClass('ImpactEffect', AAPTR_DEFAULT, true)
					|| owner.CheckClass('SelacoParticle', AAPTR_DEFAULT, true)) {
					// wall shrapnel moves, so highlight it!
					owner.A_SetRenderStyle(1.0, STYLE_STENCIL);
					owner.SetShade(Color(0, 255, 0));
					owner.bBright = true;
				} else {
					// otherwise hide the effect
					owner.A_SetRenderStyle(1.0, STYLE_NONE);
					owner.bBright = false;
				}
				Super.Tick();
				return;
			}

			if (thermalvision_enabled) {
				if (!wasenabled) {
					storeStyles();
					wasenabled = true;
				}
				owner.A_SetRenderStyle(0.01, STYLE_TRANSLUCENT);
				owner.A_SETSCALE(0.01);
				owner.alpha = 0.01;
				Super.Tick();
				return;
			}
		}
	}

	void storeStyles() {
		prevstyle = owner.GetRenderStyle();
        prevalpha = owner.alpha;
        prevscalex = owner.scale.x;
        prevscaley = owner.scale.y;
	}

	override void PostBeginPlay()
	{
		wasenabled = false;
        Tick();
	}

}
	
