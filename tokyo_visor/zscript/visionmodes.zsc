Class TV_Hudhandler : EventHandler
{
    // DEPRECATED - do not add any code here!
}

Class TV_StaticHudhandler : StaticEventHandler
{
    override void UiTick ()
    {
        PlayerInfo p = players[consoleplayer];
		PlayerPawn pawn = p.mo;
		let d = Dawn(pawn);
		if((d) && d.countInv("TV_VisorItem") > 0) {
			TV_VisorItem visor = TV_VisorItem(d.FindInventory("TV_VisorItem"));
		
			bool nightvision_enabled = visor.visorActive && visor.visorMode == TV_NIGHTVISION;
			bool motionvision_enabled = visor.visorActive && visor.visorMode == TV_MOTIONVISION;
			bool thermalvision_enabled = visor.visorActive && visor.visorMode == TV_THERMALVISION;

            Shader.SetUniform1f(players[consoleplayer], "Nightvision", "timer", gametic);
            Shader.SetUniform1f(players[consoleplayer], "Motionvision", "timer", gametic);
            Shader.SetUniform1f(players[consoleplayer], "Thermalvision", "timer", gametic);

            Shader.SetEnabled(players[consoleplayer], "Nightvision", nightvision_enabled);
            Shader.SetEnabled(players[consoleplayer], "Motionvision", motionvision_enabled);
            Shader.SetEnabled(players[consoleplayer], "Thermalvision", thermalvision_enabled);
        }
    }

    override void OnRegister()
    {
        console.printf("Registered TV_StaticHudhandler");
    }

    override void WorldLoaded (WorldEvent e)
    {
        // remove any lingering TV_Hudhandler left over from previous versions of this mod
        let dest = EventHandler.find("TV_HudHandler");
        if (dest) {
            console.printf("Removing lingering TV_HudHandler");
            dest.destroy();
        }
    }
}