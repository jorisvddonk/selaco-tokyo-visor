class TV_NetEventHandler : StaticEventHandler {

    TV_VisorItem getVisor(ConsoleEvent e) {
        PlayerPawn pawn = players[e.player].mo;
        let d = Dawn(pawn);
        if((d) && d.countInv("TV_VisorItem") > 0) {
            TV_VisorItem visor = TV_VisorItem(d.FindInventory("TV_VisorItem"));
            return visor;
        } else {
            console.printf("WARN (TV): TV_VisorItem missing!!");
        }
        return null;
    }

    void InstallVisor(PlayerPawn pawn) {
        CVar.FindCVar("tokyo_visor_enabled").SetBool(true);
        let d = Dawn(pawn);
        if((d) && d.countInv("TV_VisorItem") == 0) {
            d.GiveInventory('TV_VisorItem', 1); // give Visor Item to be able to control Toyko Visor
        } else {
            console.printf("Already have TV_VisorItem");
        }
    }

    void RemoveVisor(PlayerPawn pawn) {
        CVar.FindCVar("tokyo_visor_enabled").SetBool(false);
        let d = Dawn(pawn);
        if((d) && d.countInv("TV_VisorItem") > 0) {
            d.SetInventory('TV_VisorItem', 0);
        }
        // remove TV_Hudhandler
        let dest = EventHandler.find("TV_HudHandler");
        if (dest) {
            dest.destroy();
        }
        // remove TV_MonsterModifier
        dest = EventHandler.find("TV_MonsterModifier");
        if (dest) {
            dest.destroy();
        }
        // remove all TV_Actor_VFX_Updater
        TV_Actor_VFX_Updater updater;
        ThinkerIterator updaterList = ThinkerIterator.Create("TV_Actor_VFX_Updater");
        while (updater = TV_Actor_VFX_Updater(updaterList.Next()))
        {
            updater.Destroy();
        }
        // remove all TV_ConditionalEffectHider
        TV_ConditionalEffectHider hider;
        ThinkerIterator hiderList = ThinkerIterator.Create("TV_ConditionalEffectHider");
        while (hider = TV_ConditionalEffectHider(hiderList.Next()))
        {
            hider.Destroy();
        }
    }
   
    override void NetworkProcess(ConsoleEvent e) {
        // Toggle Visor
        if(e.name == "TV_ToggleVisor") {
            TV_VisorItem visor = getVisor(e);
            if (visor) {
                visor.ToggleVisor();
            }
            return;
        }

        // Change Visor Mode
        if(e.name == "TV_ChangeVisorMode") {
            TV_VisorItem visor = getVisor(e);
            if (visor) {
                visor.ChangeVisorMode();
            }
            return;
        }

        // Smart Switch to Night Vision
        if(e.name == "TV_SmartToggle_NightVision") {
            TV_VisorItem visor = getVisor(e);
            if (visor) {
                visor.SetOrToggleVisorMode(0);
            }
            return;
        }

        // Smart Switch to Motion Vision
        if(e.name == "TV_SmartToggle_MotionVision") {
            TV_VisorItem visor = getVisor(e);
            if (visor) {
                visor.SetOrToggleVisorMode(1);
            }
            return;
        }

        // Smart Switch to Thermal Vision
        if(e.name == "TV_SmartToggle_ThermalVision") {
            TV_VisorItem visor = getVisor(e);
            if (visor) {
                visor.SetOrToggleVisorMode(2);
            }
            return;
        }

        if(e.name == "TV_AddVisorItem") {
            console.printf("Initializing Tokyo Visor...");
            PlayerPawn pawn = players[e.player].mo;
            InstallVisor(pawn);
            return;
        }

        if(e.name == "TV_RemoveVisorItem") {
            console.printf("Removing Tokyo Visor...");
            PlayerPawn pawn = players[e.player].mo;
            RemoveVisor(pawn);
            return;
        }
        
    }

    override void WorldLoaded (WorldEvent e)
    {
        // Check for any inconsistencies with the cvar and the items, then resolve them
        let cv = CVar.FindCVar("tokyo_visor_enabled");
        let haveVisorItem = false; // to be updated below
        PlayerPawn pawn = players[0].mo;
        let d = Dawn(pawn);
        if((d) && d.countInv("TV_VisorItem") > 0) {
            haveVisorItem = true;
        }
        if (cv.GetBool() == false && haveVisorItem) {
            // needs to be removed, but we have the visor items (??), so remove it!
            console.printf("TOKYO VISOR: Inconsistency detected, possibly due to an upgade in the mod. Removing visor!");
            RemoveVisor(pawn);
            console.printf("If you want Tokyo Visor installed, please manually re-add Tokyo Visor to your save game via Mod Options!");
        } else if (cv.GetBool() == true && !haveVisorItem) {
            // needs to be active, but we don't have the visor items (??), so add them!
            console.printf("TOKYO VISOR: Inconsistency detected, possibly due to an upgade in the mod. Trying to fix the visor!");
            InstallVisor(pawn);
            console.printf("Visor should be fixed now; if not, please 'fix' the visor via Mod Options!");
        }
    }
}
